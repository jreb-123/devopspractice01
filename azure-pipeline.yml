trigger:
  branches:
    include:
      - main
      - dev

pool:
  name: default

variables:
  imageName: 'jrebpracticeacr.azurecr.io/jrebaza01/practice01-latest'
  chartPath: 'app'
  releaseName: 'practice01'
  namespace: 'dev'
  ACR_DOCKER_CONFIG_JSON: ''


steps:
# 1️⃣ Checkout del código
- checkout: self

# 2️⃣ Build de la imagen
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: build
    Dockerfile: 'Dockerfile'
    tags: |
      $(imageName)

# 3️⃣ Login al ACR
- task: Docker@2
  displayName: 'Login to ACR'
  inputs:
    command: login
    containerRegistry: 'jrebpracticeacr'

# 4️⃣ Push al ACR
- task: Docker@2
  displayName: 'Push Docker image to ACR'
  inputs:
    command: push
    tags: |
      $(imageName)

# 5️⃣ Crear secret para ACR
- task: Kubernetes@1
  displayName: 'Create ACR secret'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'aks-kubeconfig-connection'
    command: 'apply'
    useConfigurationFile: false
    arguments: >
      create secret docker-registry acr-secret
      --docker-server=jrebpracticeacr.azurecr.io
      --docker-username=$(ACR_USERNAME)
      --docker-password=$(ACR_PASSWORD)
      --namespace $(namespace)
      --dry-run=client -o yaml | kubectl apply -f -

# 6️⃣ Deploy automático con Helm a AKS
- task: HelmDeploy@0
  displayName: 'Deploy to AKS with Helm'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'aks-kubeconfig-connection'
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: '$(chartPath)'
    releaseName: '$(releaseName)'
    namespace: '$(namespace)'
    overrideValues: |
      image.repository=jrebpracticeacr.azurecr.io/jrebaza01/practice01-latest
      image.tag=latest
      imagePullSecrets[0].name=acr-secret
    install: true
    waitForExecution: false
    arguments: '--create-namespace'